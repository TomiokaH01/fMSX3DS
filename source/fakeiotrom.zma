	org	0x4000
;
;	exbasic.mac
;
;	Skeleton expanded statement cartridge header/dispatcher/utilities
;
;	Ver 1.0		Jey Suzuki (9/1/1987)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Modified for MSX0 IOTBASIC and Port to zma	h.tomioka(2024)
; Code for ZMA. https://github.com/hra1129/zma
;
;	Cartridge header
;
defw	0x4241
defw	0
defw	sttmnt
space	10,0

scope	basic_extension

;
;       BIOS entry
;
calbas = 0x0159

;
;	BASIC interpreter routines
;
rom_error 	= 0x406F	; 'xxxx error'
rom_chrgtr 	= 0x4666	; get next character from text
rom_frmevl	= 0x4c64	; evaluate an expression (general purpose)
rom_docnvf	= 0x517A	; type conversion
rom_getin2	= 0x520F	; get an integer (-32768..32767) to DE
rom_getbyt	= 0x521C	; get a byte (0..255) to A and E
rom_frmqnt	= 0x542F	; get an integer (-32768..65535) to DE
rom_ptrget	= 0x5EA4	; get a pointer to variable to DE
rom_strini	= 0x6627	; make a room in string space
rom_frestr	= 0x67D0	; get a pointer to string

;
;	Work area
;
buf		=	0xF55E		; line input buffer (used as a temp)
valtyp	= 	0xF663		; value type
dsctmp	= 	0xF698		; string descriptor temp
dac		= 	0xF7F6		; decimal accumulator
procnm	= 	0xFd89		; name of procedure

;
;	Macros
;
synchk	MACRO token
	call	synchr
	defb	token
	ENDM
	
chrget	MACRO
	call	chrgtr
	ENDM
	
IOTCMD	MACRO cmd1, cmd2
	ld		a, 0xE0		;MSX0 IOT command start with 0xE0
	out 	[0x08],a	;Write to IOPort 0x08
	ld		a,	0x01
	out 	[0x08],a
	ld		a,	cmd1
	out 	[0x08],a
	ld		a,	cmd2	;0x80 or 0xC0。0x80->IN、0xC0->OUT
	out 	[0x08],a
	ENDM
	
IOTIO	MACRO cmd1, cmd2
	synchk	'('
	call	frmevl		; evaluate the expression
	IOTCMD	cmd1, cmd2
	push	hl			; save text pointer
	call	frestr		; get a pointer to string descriptor
	ld		a,[hl]		; get the length of the source string
	out 	[0x08],a 	; Write string length to IO Port 0x08
	and		a, a		; null string given?
	jp		z, snerr	; yes(error).
	ld		b,a
	inc		hl
	ld		a,[hl]		; get a pointer to the source string
	inc		hl
	ld		h,[hl]
	ld		l,a
	ld		de,buf
	call	str_loop
	pop		hl			; restore text pointer
	ld		a, 0
	out 	[0x08], a	; end command 0x00 0x00
	out 	[0x08], a
	ENDM

;
;	Statement dispatcher
;
sttmnt::
	ei
	push	hl		; save text pointer
	ld	hl,command
ckcmd1:
	ld	de,procnm
ckcmd2:
	ld	a,[de]		; get specified statement
	cp	a,[hl]		; compare with my statement
	jr	nz,notcmd	; failed, try next statement
	inc	de
	inc	hl
	and	a,a			; end of name?
	jr	nz,ckcmd2	; check more characters
	ld	e,[hl]		; get execute address
	inc	hl
	ld	d,[hl]
	pop	hl	 		; restore text pointer
	call	jpde
	and	a,a			; say statement executed
	ret
;
jpde:
	push	de
	ret
;
notcmd:
	ld	c,0ffh		; skip till end of name
	xor	a,a
	cpir
	inc	hl		; skip address
	inc	hl
	cp	a,[hl]		; end of table?
	jr	nz,ckcmd1	; no, search next
	pop	hl		; restore text pointer
	scf			; say statement not in this cartridge
	ret
;
;	Statement table
;
;	<format>
;		defb	<statement_name>,0	<- in upper case
;		defw	<execute_address>
;			.
;			.
;		defb	0			<- end of table
;
command:
	defb	"IOTFIND",0
	defw	iotfind
	defb	"IOTGET",0
	defw	iotget
	defb	"IOTPUT",0
	defw	iotput
	defb	"IOTINIT",0
	defw	iotinit
;
	defb	0		; end of table
;
;	Text handlers
;
synchr:
	ld	a,[hl]		; get text
	ex	[sp],hl
	cp	a,[hl]		; compare with correct token
	inc	hl
	ex	[sp],hl
	jr	nz,snerr	; no match, error
chrgtr:
	ld	ix,rom_chrgtr
	call	calbas
	ei
	ret

;
;	Error handlers
;
errsn	=	2		; syntax error
errfc   =	5		; illegal function call
errom   =	7		; out of memory
errtm   =	13		; type mismatch
errdio  =	19		; device I/O error

tmerr:
	ld	e,errtm
	defb	1
fcerr:
	ld	e,errfc
	defb	1
snerr:
	ld	e,errsn
	ld	ix,rom_error
	jr	jcalbas

;
;	Interface routines between ROM BASIC routines
;
strini:
	ld	ix,rom_strini
	jr	jcalbas

ptrget:
	ld	ix,rom_ptrget
	jr	jcalbas

docnvf:
	ld	ix,rom_docnvf
	jr	jcalbas

frmevl:
	ld	ix,rom_frmevl
	jr	jcalbas
	
frmqnt:
	ld	ix,rom_frmqnt
	jr	jcalbas

frestr:
	ld	ix,rom_frestr
	jr	jcalbas

getbyt:
	ld	ix,rom_getbyt
jcalbas:
	call	calbas		; call ROM routines
	ei
	ret

;
;	Return value (integer only) to variable specified
;
; Entry:	HL     = pointer to variable (returned from PTRGET)
;		VALTYP = type of variable
;		DAC+2  = integer value to be returned
;
;		Destroyes all registers
;
ret_number:
	push	hl		; save pointer to variable
	ld	hl,valtyp	; get variable type
	ld	a,[hl]
	ld	c,a		; set it as length of data (2,4,8)
	ld	[hl],2		; set integer type
	ld	hl,dac+2	; assume integer
	cp	2		; is it integer ?
	jr	z,numint	; yes, just copy and done
	cp	4		; is it single real ?
	jr	z,numflt	; yes
	cp	8		; is it double real ?
	jp	nz,tmerr	; no, cannot return a value to string
numflt:
	push	bc		; save length of data
	call	docnvf		; coerce to desired type
	pop	bc		; restore length of data
	ld	hl,dac		; prepare to transfer value to variable
numint:
	ld	b,0
	pop	de		; restore pointer to variable
	ldir			; store to variable
	ret

;
;	assign a string to a variable
;
; Entry:	A   = length of string
;		HL  = pointer to variable (returned from PTRGET)
;		BUF = string itself
;
;		Destroyes all registers
;
ret_string:
	push	hl		; save pointer to variable
	push	af		; save length of string
	call	strini
	ld		de,[dsctmp+1]
	ld		hl,buf
	pop		af		; restore length of string
	and		a,a		; null string?
	jr		z,ret_null	; yes
	ld		c,a
	ld		b,0
	ldir
ret_null:
	pop		de		; restore pointer to variable
	ld		hl,dsctmp
	ld		bc,3
	ldir
	ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	Your statement handler comes here
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	To demonstrate the usage of system routines, two sample
;	statements are shown below. One is 'FOO', the other 'BAR'.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	<syntax>
;		_FOO(<string_var>,<string_exp>)
;
;	<function>
;		FOO converts the <string_exp> to upper case, and give
;		it to <string_var>.
;
;	<example>
;		_FOO(A$,"This is an example")
;		PRINT A$
;		THIS IS AN EXAMPLE
;

;
;	<syntax>
;		_BAR(<variable>,<byte_expression>,<byte_expression>)
;
;	<function>
;		BAR adds the two <byte_expression>'s and give the
;		result to <variable>.
;
;	<example>
;		_BAR(A,100,23)
;		PRINT A
;		123
;
	
str_loop:
	ld		a,[hl]		; get the source string
	out 	[0x08],a	; Write char to IO Port 8。
	ld		[de],a
	inc		hl
	inc		de
	djnz	str_loop
	ret
	
iotfind:
	IOTIO	0x53, 0xC0	; 0xC0:OutPut Data  {0xE0 0x01 0x53 0xC0}
	synchk	','
	call	ptrget		; get a pointer to variable
	push	de			; save a pointer to variable
	ld		a,[valtyp]	; VALTYP 3:String else jump(In MSX0 only 2(Interger of 2byte.)). Interger:Length of String Array(==Number of IOT device)
	push	af			; save the type of variable
	;out 	[0x08],a	; for Debug.
	cp		a, 3
	jp		nz,	retnum
	
	pop 	af
	synchk	','
	call	ptrget
	in		a,[0x08]
	ld		b, a
	pop		de
	push	hl
	
	IOTCMD	0x13, 0x80	; 0x13:IOTFIND(string)  0x80:Input Data {0xE0 0x01 0x13 0x80}
	
getdevic:
	push	bc
	in		a,[0x08]	; data size(fixed value. always return 2. ignored)
	in		a,[0x08]
	ld		hl, buf
	ld		[hl], a
	in		a,[0x08]
	inc		hl
	ld		[hl], a
	ld		a, 2
	push	de			; prepare copy DE to HL
	pop		hl			; copy DE to HL
	call	ret_string
	pop		bc
	djnz	getdevic
	
	pop		hl
	
	synchk	')'
	ret
retnum:
	IOTCMD	0x11, 0x80	; 0x11:IOTFind(2byte integer == string array count)  0x80:Input Data {0xE0 0x01 0x11 0x80}
	in		a,[0x08]	; data size(fixed value. always return 2. ignored)
	in		a,[0x08]
	ld		a,0
	ld		[dac+2],a
	in		a,[0x08]
	;ld		a,2
	ld		[dac+2],a
	xor		a,a
	ld		[dac+3],a
	pop		af			; restore type of variable
	ld		[valtyp],a	; set it to VALTYP
	ex		[sp],hl		; save text pointer
	call	ret_number
	pop	hl				; restore text pointer
	synchk	')'
	ret
	
iotget:
	IOTIO	0x53, 0xC0	; 0xC0:OutPut Data  {0xE0 0x01 0x53 0xC0}
	synchk	','
	call	ptrget		; get a pointer to variable
	push	de			; save a pointer to variable
	ld		a,[valtyp]
	push	af			; save the type of variable
	cp		a, 3
	jp		nz,	getnum
	
	pop		af
	push	hl
	IOTCMD	0x03, 0x80	; 0x03:IOTGET(String)  0x80:Input Data  {0xE0 0x01 0x03 0x80}
	in		a,[0x08]	; length of the string
	push	af
	ld		b,a
	ld		hl, buf
getstr_loop:
	in		a,[0x08]
	ld		[hl], a
	inc		hl
	djnz	getstr_loop
	
	pop		af			; restore length of the string
	pop		de			; restore text pointer
	pop		hl			; restore pointer to variable
	push	de			; save a text pointer
	call	ret_string

	pop		hl			; restore text pointer
	synchk	')'
	ret
	
getnum:
	IOTCMD	0x01, 0x80	; 0x01:IOTGET(Interger)  0x80:Input Data  {0xE0 0x01 0x01 0x80}
	in		a,[0x08]	; Type of Interger. always return 2(==type:2byte Interger). Ignored.
	in		a,[0x08]
	ld		[dac+2],a
	in		a,[0x08]
	ld		[dac+3],a
	pop		af			; restore type of variable
	ld		[valtyp],a	; set it to VALTYP
	ex		[sp],hl		; save text pointer
	;out 	[0x08],a	; Debug
	call	ret_number
	pop	hl				; restore text pointer
	synchk	')'
	ret
	
iotput:		; Currently only <63 data. To do:data with over 64 length.
	IOTIO	0x53, 0xC0	; 0xC0:OutPut Data  {0xE0 0x01 0x53 0xC0}
	synchk	','
	push		hl
	call	frmevl
	ld		a,[valtyp]
	cp		a, 3
	jp		nz,	putnum
	IOTCMD	0x43, 0xC0	; 0x43:IOTPUT(String)  0xC0:Output Data  {0xE0 0x01 0x43 0xC0}
	
	push	hl
	call	frestr
	ex		de,hl
	pop		hl
	push 	hl
	ld		a,[de]
	push	af
	out		[0x08],a	; Output string length
	inc		de
	ld		a, [de]
	ld		l, a
	inc		de
	ld		a, [de]
	ld		h, a
	pop		af
	ld		b,a
putstr:
	ld		a,[hl]
	out		[0x08],a	; Output data
	inc		hl
	djnz	putstr
	ld		a,0			; Output {0x00} for a end of data.
	out 	[0x08],a
	
	pop		hl
	
	pop			de
	synchk	')'
	ret
	
putnum:
	IOTCMD	0x41, 0xC0  ; 0x41:IOTPUT(Interger)  0xC0:Output Data  {0xE0 0x01 0x41 0xC0}
	ld		a,2
	out		[0x08],a	; Output data size(fixed value(2))
	pop		hl
	call	frmqnt
	ld		a,e
	out 	[0x08],a
	ld		a,d
	out 	[0x08],a
	synchk	')'
	ret
	
iotinit:
	synchk	'('
	synchk	')'
	ret

	endscope
	
	space	0x8000-$,0
	
	
