/** Completely rewritten by Alex Wulms:                     **/
/**  - VDP Command execution 'in parallel' with CPU         **/
/**  - Corrected behaviour of VDP commands                  **/
/**  - Made it easier to implement correct S7/8 mapping     **/
/**    by concentrating VRAM access in one single place     **/
/**  - Made use of the 'in parallel' VDP command exec       **/
/**    and correct timing. You must call the function       **/
/**    LoopVDP() from LoopZ80 in MSX.c. You must call it    **/
/**    exactly 256 times per screen refresh.                **/
/** Started on       : 11-11-1999                           **/
/** Beta release 1 on:  9-12-1999                           **/
/** Beta release 2 on: 20-01-2000                           **/
/**  - Corrected behaviour of VRM <-> Z80 transfer          **/
/**  - Improved performance of the code                     **/
/** Public release 1.0: 20-04-2000                          **/
/*************************************************************/

/** Modified for V9990 VDP h.tomioka 2024         **/

#include "V9990.h"
#include <string.h>

/*************************************************************/
/** Other usefull defines                                   **/
/*************************************************************/
#define VDP_VRMP5(X, Y) (VRAM + ((Y&1023)<<7) + ((X&255)>>1))
#define VDP_VRMP6(X, Y) (VRAM + ((Y&1023)<<7) + ((X&511)>>2))

#define VDP_VRMP(M, X, Y) VDPVRMP(M, X, Y)
#define VDP_POINT(M, X, Y) VDPpoint(M, X, Y)
#define VDP_PSET(M, X, Y, C, O) VDPpset(M, X, Y, C, O)

#define CMV9990_STOP  0x0
#define CMV9990_LMMM  0x4

/*************************************************************/
/* Many VDP commands are executed in some kind of loop but   */
/* essentially, there are only a few basic loop structures   */
/* that are re-used. We define the loop structures that are  */
/* re-used here so that they have to be entered only once    */
/*************************************************************/
#define pre_loop \
    while ((cnt-=delta) > 0) {

/* Loop over DX, DY */
#define post__x_y(MX) \
    if (!--ANX || ((ADX+=TX)&MX)) { \
      if (!(--NY&1023) || (DY+=TY)==-1) \
        break; \
      else { \
        ADX=DX; \
        ANX=NX; \
      } \
    } \
  }

/* Loop over DX, SY, DY */
#define post__xyy(MX) \
    if ((ADX+=TX)&MX) { \
      if (!(--NY&1023) || (SY+=TY)==-1 || (DY+=TY)==-1) \
        break; \
      else \
        ADX=DX; \
    } \
  }

/* Loop over SX, DX, SY, DY */
#define post_xxyy(MX) \
    if (!--ANX || ((ASX+=TX)&MX) || ((ADX+=TX)&MX)) { \
      if (!(--NY&1023) || (SY+=TY)==-1 || (DY+=TY)==-1) \
        break; \
      else { \
        ASX=SX; \
        ADX=DX; \
        ANX=NX; \
      } \
    } \
  }

/*************************************************************/
/** Structures and stuff                                    **/
/*************************************************************/
static struct {
    int SX, SY;
    int DX, DY;
    int TX, TY;
    int NX, NY;
    int MX;
    int ASX, ADX, ANX;
    byte LO;
    byte CM;
} MMCV9990;

/*************************************************************/
/** Function prototypes                                     **/
/*************************************************************/
static byte VDPpoint5(register int SX, register int SY);
static byte VDPpoint6(register int SX, register int SY);
static void VDPpsetlowlevel(register byte* P, register byte CL,
    register byte M, register byte OP);

static void VDPpset5(register int DX, register int DY,
    register byte CL, register byte OP);
static void VDPpset6(register int DX, register int DY,
    register byte CL, register byte OP);

static void LmmmEngineV9990(void);

/*************************************************************/
/** Variables visible only in this module                   **/
/*************************************************************/
static int  VdpOpsCntV9990 = 1;
static void (*VdpEngineV9990)(void) = 0;

/** VDPpoint5() ***********************************************/
/** Get a pixel on screen 5                                 **/
/*************************************************************/
INLINE byte VDPpoint5(int SX, int SY)
{
    return (*VDP_VRMP5(SX, SY) >>
        (((~SX) & 1) << 2)
        ) & 15;
}

/** VDPpoint6() ***********************************************/
/** Get a pixel on screen 6                                 **/
/*************************************************************/
INLINE byte VDPpoint6(int SX, int SY)
{
    return (*VDP_VRMP6(SX, SY) >>
        (((~SX) & 3) << 1)
        ) & 3;
}

/** VDPpsetlowlevel() ****************************************/
/** Low level function to set a pixel on a screen           **/
/** Make it inline to make it fast                          **/
/*************************************************************/
INLINE void VDPpsetlowlevel(byte* P, byte CL, byte M, byte OP)
{
    switch (OP)
    {
    case 0: *P = (*P & M) | CL; break;
    case 1: *P = *P & (CL | M); break;
    case 2: *P |= CL; break;
    case 3: *P ^= CL; break;
    case 4: *P = (*P & M) | ~(CL | M); break;
    case 8: if (CL) *P = (*P & M) | CL; break;
    case 9: if (CL) *P = *P & (CL | M); break;
    case 10: if (CL) *P |= CL; break;
    case 11:  if (CL) *P ^= CL; break;
    case 12:  if (CL) *P = (*P & M) | ~(CL | M); break;
    }
}

/** VDPpset5() ***********************************************/
/** Set a pixel on screen 5                                 **/
/*************************************************************/
INLINE void VDPpset5(int DX, int DY, byte CL, byte OP)
{
    register byte SH = ((~DX) & 1) << 2;

    VDPpsetlowlevel(VDP_VRMP5(DX, DY),
        CL << SH, ~(15 << SH), OP);
}

/** VDPpset6() ***********************************************/
/** Set a pixel on screen 6                                 **/
/*************************************************************/
INLINE void VDPpset6(int DX, int DY, byte CL, byte OP)
{
    register byte SH = ((~DX) & 3) << 1;

    VDPpsetlowlevel(VDP_VRMP6(DX, DY),
        CL << SH, ~(3 << SH), OP);
}

/** GetVdpTimingValue() **************************************/
/** Get timing value for a certain VDP command              **/
/*************************************************************/
static int GetVdpTimingValue(register int* timing_values)
{
    return(timing_values[((V9990VDP[8]>>6)&0x01) | ((V9990VDP[8]>>4)&0x02) | ((V9990VDP[7]>>1)&0x04)]);
}

/** VDPDraw() ************************************************/
/** Perform a given V9938 operation Op.                     **/
/*************************************************************/
byte VDPDrawV9990(byte Op)
{
    MMCV9990.CM = Op >> 4;

    switch (Op >> 4)
    {
    case CMV9990_STOP:
        V9990Port[5] &= 0xFE;
        VDPStatus[2] &= 0xFE;
        VdpEngineV9990 = 0;
        return 1;
    case CMV9990_LMMM:
        VdpEngineV9990 = LmmmEngineV9990;
        break;
    }

    /* Fetch unconditional arguments */
    /* Strikingly similar to V9938 */
    MMCV9990.SX = (V9990VDP[32] + ((int)V9990VDP[33] << 8)) & 511;
    MMCV9990.SY = (V9990VDP[34] + ((int)V9990VDP[35] << 8)) & 1023;
    MMCV9990.DX = (V9990VDP[36] + ((int)V9990VDP[37] << 8)) & 511;
    MMCV9990.DY = (V9990VDP[38] + ((int)V9990VDP[39] << 8)) & 1023;
    MMCV9990.NX = (V9990VDP[40] + ((int)V9990VDP[41] << 8)) || 2048;
    MMCV9990.NY = (V9990VDP[42] + ((int)V9990VDP[43] << 8)) || 4096;
    MMCV9990.TX = V9990VDP[44] & 0x04 ? -1 : 1;
    MMCV9990.TY = V9990VDP[44] & 0x08 ? -1 : 1;
    MMCV9990.ADX = MMCV9990.DX;
    MMCV9990.ANX = MMCV9990.NX;
    MMCV9990.ASX = MMCV9990.SX;
    MMCV9990.MX = 256<<((V9990VDP[6] & 0x0C) >> 2);
    MMCV9990.LO = Op & 0x0F;

    /* Command execution started */
    V9990Port[5] |= 0x01;
    VDPStatus[2] |= 0x01;

    /* Start execution if we still have time slices */
    if (VdpEngineV9990 && (VdpOpsCntV9990 > 0)) VdpEngineV9990();
}

/** LmmmEngineV9990() *********************************************/
/** Vram -> Vram                                            **/
/*************************************************************/
void LmmmEngineV9990(void)
{
    register int SX = MMCV9990.SX;
    register int SY = MMCV9990.SY;
    register int DX = MMCV9990.DX;
    register int DY = MMCV9990.DY;
    register int TX = MMCV9990.TX;
    register int TY = MMCV9990.TY;
    register int NX = MMCV9990.NX;
    register int NY = MMCV9990.NY;
    register int ASX = MMCV9990.ASX;
    register int ADX = MMCV9990.ADX;
    register int ANX = MMCV9990.ANX;
    register byte LO = MMCV9990.LO;
    register int cnt;
    register int delta;

    delta = 1200;
    cnt = VdpOpsCntV9990;

    pre_loop VDPpset5(ADX, DY, VDPpoint5(ASX, SY), LO); post_xxyy(256)

        if ((VdpOpsCntV9990 = cnt) > 0)
        {
            /* Command execution done */
            V9990Port[5] &= 0xFE;
            VDPStatus[2] &= 0xFE;
            VdpEngineV9990 = 0;
            if (!NY)
            {
                SY += TY;
                DY += TY;
            }
            else if (SY == -1)DY += TY;
            V9990VDP[42] = NY & 0xFF;
            V9990VDP[43] = (NY >> 8) & 0x03;
            V9990VDP[34] = SY & 0xFF;
            V9990VDP[35] = (SY >> 8) & 0x03;
            V9990VDP[38] = DY & 0xFF;
            V9990VDP[39] = (DY >> 8) & 0x03;
        }
        else
        {
            MMCV9990.SY = SY;
            MMCV9990.DY = DY;
            MMCV9990.NY = NY;
            MMCV9990.ANX = ANX;
            MMCV9990.ASX = ASX;
            MMCV9990.ADX = ADX;
        }
}

/** LoopVDP() ************************************************/
/** Run X steps of active VDP command                       **/
/*************************************************************/
void LoopVDPV9990(void)
{
    if (VdpOpsCntV9990 <= 0)
    {
        //#ifdef TURBO_R
        //      VdpOpsCnt += (CPU.User)&0x01 ? 6831 : 13662;
        //#else
              //Value from v9938.cpp from MAME
              // https://www.mamedev.org/
              //This fix graphic glitches of Dragon Quest 3 Simulator by Lemon.
              // https://q3lemon.web.fc2.com/index.html
        VdpOpsCntV9990 += 13662;
        //#endif // TURBO_R
        if (VdpEngineV9990 && (VdpOpsCntV9990 > 0))VdpEngineV9990();
    }
    else
    {
        //#ifdef TURBO_R
        //      VdpOpsCnt = (CPU.User) & 0x01 ? 6831 : 13662;
        //#else
        VdpOpsCntV9990 = 13662;
        //#endif // TURBO_R
        if (VdpEngineV9990) VdpEngineV9990();
    }
}